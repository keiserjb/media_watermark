<?php

/**
 * @file
 * Watermark media module
 * @author Bogdan Tur
 */

/**
 * Implements hook_permission().
 */
function media_watermark_permission() {
  return array(
    'media watermark control' => array(
      'title' => t('Control watermark'),
      'description' => t('Checkbox appear for controlling watermark at file uploading.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function media_watermark_menu() {
  $items = array();

  $items['admin/config/media/watermark'] = array(
    'title' => 'Media Watermark settings',
    'description' => 'Control how to apply watermark.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_watermark_edit_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/media_watermark_edit.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/media/watermark/all'] = array(
    'title' => 'Edit Watermarks',
    'description' => 'Edit watermarks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_watermark_edit_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/media_watermark_edit.admin.inc',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/media/watermark/add'] = array(
    'title' => 'Add watermark',
    'description' => 'Add watermark.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_watermark_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/media_watermark_add.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/media/watermark/edit/%'] = array(
    'title' => 'Add watermark',
    'description' => 'Add watermark.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_watermark_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/media_watermark_add.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/media/watermark/delete/%'] = array(
    'title' => 'Delete watermark',
    'description' => 'Delete watermark.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_watermark_delete_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/media_watermark_delete.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Function to get all watermarks array stored in db.
 *
 * @return array
 *   all stored watermarks
 */
function media_watermark_get_watermarks() {
  $result = db_query("select * from {media_watermark}");
  if (isset($result) && !empty($result)) {
    return $result->fetchAll(PDO::FETCH_ASSOC);
  }
}

/**
 * Function to get watermark name.
 *
 * @param string $id
 *   watermark id
 *
 * @return string
 *   watermark name
 */
function media_watermark_get_name($id) {
  $result = db_query('SELECT name FROM {media_watermark} WHERE wid = :wid', array(':wid' => $id));
  $result = $result->fetchObject();
  if (!empty($result)) {
    $result = $result->name;
    return $result;
  }
}

/**
 * Function to get watermark object.
 *
 * @param string $id
 *   watermark id
 *
 * @return object
 *   watermark object
 */
function media_watermark_get_watermark($id) {
  $result = db_query('SELECT * FROM {media_watermark} WHERE wid = :wid', array(':wid' => $id));
  $result = $result->fetchObject();
  if (!empty($result)) {
    return $result;
  }
}

/**
 * Implements hook_form_alter().
 */
function media_watermark_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array(
    'file_entity_add_upload_multiple',
    'file_entity_add_upload',
    'media_add_upload',
  ))
  ) {
    $form['no_watermark'] = array(
      '#type' => 'checkbox',
      '#title' => t('No watermark'),
      '#default_value' => FALSE,
      '#weight' => -10,
    );
    $watermarks = media_watermark_get_watermarks();
    $names = media_watermark_prepare_names($watermarks);
    $images = media_watermark_prepare_images($watermarks);
    $form['watermarks_names'] = array(
      '#type' => 'select',
      '#options' => $names,
      '#description' => t('To edit watermark just click on its image'),
      '#weight' => -9,
    );
    $form['watermarks_images'] = array(
      '#type' => 'item',
      '#markup' => $images,
      '#weight' => -8,
    );
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'media_watermark') . '/media_watermark.js',
    );
    // Add custom submit function.
    array_unshift($form['#submit'], 'media_watermark_add_watermark');
  }
}

/**
 * Callback to add watermark.
 *
 * @param array $form
 *   form array
 * @param array $form_state
 *   form state array
 */
function media_watermark_add_watermark(&$form, &$form_state) {
  if (!$form_state['values']['no_watermark']) {
    // Uploaded file.
    if (is_object($form_state['values']['upload'])) {
      $file_path = drupal_realpath($form_state['values']['upload']->uri);
      media_watermark_create_image($file_path, $form_state);
    }
    elseif (is_int($form_state['values']['upload']) || is_string($form_state['values']['upload'])) {
      $uploaded = file_load($form_state['values']['upload']);
      $file_path = drupal_realpath($uploaded->uri);
      media_watermark_create_image($file_path, $form_state);
    }
    else {
      media_watermark_add_upload_multiple_submit($form, $form_state);
    }
  }
}

/**
 * Function to create jpeg image file.
 *
 * @param string $file_path
 *   temporary path of uploaded file
 *
 * @param array $form_state
 *   array of form state
 */
function media_watermark_create_image($file_path, $form_state) {
  $watermark_obj = db_query("SELECT * FROM {media_watermark} WHERE fid = :fid", array(':fid' => $form_state['values']['watermarks_names']));
  $watermark_obj = $watermark_obj->fetchObject();
  $watermark_file = file_load($watermark_obj->fid);
  $watermark_filepath = drupal_realpath($watermark_file->uri);
  ob_start();
  $watermark = new Watermark();
  $img = imagecreatefromjpeg($file_path);
  $watermark_img = imagecreatefrompng($watermark_filepath);
  $im = $watermark->addWatermark($img, $watermark_img, $watermark_obj);
  imagepng($im, $file_path);
  imagedestroy($im);
  ob_end_clean();
}

/**
 * Function media_watermark_prepare_names().
 *
 * @param array $results
 *   watermarks array
 *
 * @return array
 *   names array
 */
function media_watermark_prepare_names($results) {
  $names = array();
  foreach ($results as $key => $value) {
    $names[$value['fid']] = $value['name'];
  }
  return $names;
}

/**
 * Function media_watermark_prepare_images().
 *
 * @todo move into theme function.
 *
 * @param array $results
 *   watermark images file id array
 *
 * @return string
 *   html of watermark images
 */
function media_watermark_prepare_images($results) {
  $images = '';
  foreach ($results as $key => $value) {
    $file = file_load($value['fid']);
    $image = theme('image_formatter', array(
      'item' => array(
        'uri' => $file->uri,
        'alt' => t('Edit'),
        'title' => t('Edit'),
      ),
      'path' => array(
        'path' => 'admin/config/media/watermark/edit/' . $value['wid'],
        'options' => array('html' => TRUE),
      ),
      'image_style' => 'media_watermark',
    ));
    $images .= '<div class="image-hidden" id="image-' . $value['fid'] . '">' . $image . '</div>';
  }
  return $images;
}

/**
 * Batch operation: prepare batch to add watermarks to images.
 *
 * @param array $form_state
 *   form state array
 *
 * @return array
 *   batch operations array
 */
function media_watermark_prepare_batch($form_state) {
  drupal_set_message('Adding watermarks.');

  foreach ($form_state['files'] as $key => $value) {
    $file_path = drupal_realpath($value->uri);
    $operations[] = array(
      'media_watermark_process_multiple_images',
      array($file_path, $form_state),
    );
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'media_watermark_batch_finished',
    'init_message' => 'Prepare data.',
    'progress_message' => 'Executed @current from @total.',
    'error_message' => 'An error has occurred.',
  );
  return $batch;
}

/**
 * Batch worker function.
 *
 * Callback for batch_set().
 *
 * @param string $file_path
 *   path to image file
 * @param array $form_state
 *   array of form state
 * @param array $context
 *   batch helper array
 *
 * @ingroup callbacks
 */
function media_watermark_process_multiple_images($file_path, $form_state, &$context) {
  $context['results'][] = $file_path;
  // Optional message displayed under the progressbar.
  $context['message'] = t('Processing images "@title"', array('@title' => $file_path));
  media_watermark_create_image($file_path, $form_state);
}

/**
 * Perform tasks when a batch is complete.
 *
 * Callback for batch_set().
 *
 * @param bool $success
 *   A boolean indicating whether the batch operation successfully concluded.
 * @param int $results
 *   The results from the batch process.
 * @param array $operations
 *   The batch operations that remained unprocessed. Only relevant if $success
 *   is FALSE.
 *
 * @ingroup callbacks
 */
function media_watermark_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Added watermarks to ' . count($results) . ' images');
  }
  else {
    drupal_set_message('Finished with errors.', 'error');
  }
}

/**
 * Function which make same things as file_entity__add_upload_multiple_submit().
 *
 * @param array $form
 *   form array
 * @param array $form_state
 *   form state array
 */
function media_watermark_add_upload_multiple_submit($form, &$form_state) {
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  foreach ($form_state['values']['upload'] as $uploaded_file) {

    if ($uploaded_file['status'] == 'done') {

      $source = $uploaded_file['tmppath'];
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      // Rename it to its original name, and put it in its final home.
      // Note - not using file_move here because if we call file_get_mime
      // (in file_uri_to_object) while it has a .tmp extension, it horks.
      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);

      $file = file_uri_to_object($destination);
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);

      $saved_files[] = $file;
      $form_state['files'][$file->fid] = $file;
    }
    else {
      // @todo: move this to element validate or something.
      form_set_error('pud', t('The specified file %name could not be uploaded.', array('%name' => $uploaded_file['name'])));
    }
  }
  $batch = media_watermark_prepare_batch($form_state);
  batch_set($batch);

  // Redirect to the file edit page.
  if (file_entity_access('edit') && module_exists('multiform')) {
    $destination = array('destination' => 'admin/content/file');
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array(
      'admin/content/file/edit-multiple/' . implode(' ', array_keys($form_state['files'])),
      array('query' => $destination),
    );
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}


/**
 * Custom watermark class
 */
class Watermark {
  /**
   * Function to add watermark.
   *
   * @param object $main_img_obj
   *   image object to add watermark
   * @param object $watermark_img_obj
   *   watermark image object
   * @param object $watermark
   *   watermark position object
   *
   * @return mixed
   *   return resource of image with watermark already add
   */
  public function addWatermark($main_img_obj, $watermark_img_obj, $watermark) {
    $main_img_obj_w = imagesx($main_img_obj);
    $main_img_obj_h = imagesy($main_img_obj);
    $watermark_img_obj_w = imagesx($watermark_img_obj);
    $watermark_img_obj_h = imagesy($watermark_img_obj);

    $vm = $watermark->ver_margin;
    $hm = $watermark->hor_margin;
    switch ($watermark->hor_position) {
      case 'left':
        $margin_x = $hm;
        break;

      case 'middle':
        // Determine center position coordinates.
        $margin_x = floor(($main_img_obj_w / 2) - ($watermark_img_obj_w / 2)) + $hm;
        break;

      case 'right':
        $margin_x = $main_img_obj_w - $watermark_img_obj_w + $hm;
        break;

    }
    switch ($watermark->ver_position) {
      case 'top':
        $margin_y = $vm;
        break;

      case 'center':
        $margin_y = floor(($main_img_obj_h / 2) - ($watermark_img_obj_h / 2)) + $hm;
        break;

      case 'bottom':
        $margin_y = $main_img_obj_h - $watermark_img_obj_h + $vm;
        break;

    }

    // Set the margins for stamp and get the height/width of the stamp image.
    $sx = imagesx($watermark_img_obj);
    $sy = imagesy($watermark_img_obj);
    imagecopy($main_img_obj, $watermark_img_obj, $margin_x, $margin_y, 0, 0, $sx, $sy);
    imagejpeg($main_img_obj);
    return $main_img_obj;
  }
}
